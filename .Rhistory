gdplist <- as.numeric(filt)
summary(gdplist)
# Problem 5
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
yeardata <- length(which(year(sampleTimes) == 2012 & weekdays(sampleTimes) == "Monday"))
yeardata
length(which(year(sampleTimes) == 2012))
length(which(year(sampleTimes) == 2012 & weekdays(sampleTimes) == "Monday"))
# Problem 2
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','prob2data.csv')
gdp <- read.csv('prob2data.csv')
data2 <- gdp[complete.cases(gdp$Gross.domestic.product.2012),c(1,2,5)]
View(data2)
data2 <- data2[complete.cases(data2$X),]
# Problem 4
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv','prob4data.csv')
edu <- read.csv('prob4data.csv')
gdpedu <- merge(gdp,edu,by.x='X',by.y='CountryCode')
weirdlist <- gdpedu$Special.Notes
# Problem 2
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','prob2data.csv')
gdp <- read.csv('prob2data.csv')
data2 <- gdp[complete.cases(gdp$Gross.domestic.product.2012),c(1,2,5)]
filt <- sub(',','',data2$X.3)
gdplist <- as.numeric(filt)
cleangdp <- omit.na(filt)
cleangdp <- na.omit(filt)
cleangdp <- na.omit(gdplist)
summary(cleangdp)
# Problem 2
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','prob2data.csv')
gdp <- read.csv('prob2data.csv')
View(gdp)
data2 <- gdp[complete.cases(gdp$Gross.domestic.product.2012),c(1,2,5)]
filt <- sub(',','',data2$X.3)
View(data2)
class(gdp$Gross.domestic.product.2012)
gdp$Gross.domestic.product.2012 <- as.numeric(as.character(gdp$Gross.domestic.product.2012))
View(gdp)
# Problem 2
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','prob2data.csv')
gdp <- read.csv('prob2data.csv')
gdp$Gross.domestic.product.2012 <- as.numeric(as.character(gdp$Gross.domestic.product.2012))
data2 <- gdp[complete.cases(gdp$Gross.domestic.product.2012),c(1,2,5)]
View(data2)
filt <- sub(',','',data2$X.3)
gdplist <- as.numeric(filt)
gdplist
View(data2)
# Problem 2
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','prob2data.csv')
gdp <- read.csv('prob2data.csv')
gdp$Gross.domestic.product.2012 <- as.numeric(as.character(gdp$Gross.domestic.product.2012))
data2 <- gdp[complete.cases(gdp$Gross.domestic.product.2012),c(1,2,5)]
filt <- gsub(',','',data2$X.3)
gdplist <- as.numeric(filt)
cleangdp <- na.omit(gdplist)
summary(cleangdp)
# Problem 4
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv','prob4data.csv')
edu <- read.csv('prob4data.csv')
gdpedu <- merge(gdp,edu,by.x='X',by.y='CountryCode')
weirdlist <- gdpedu$Special.Notes
weirdlist
# Problem 3
grep('United$',data2$X.2)
grep('*United',data2$X.2)
grep('^United',data2$X.2)
# Problem 3
grep('United$',gdp$X.2)
grep('*United',gdp$X.2)
grep('^United',gdp$X.2)
# Problem 4
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv','prob4data.csv')
edu <- read.csv('prob4data.csv')
gdpedu <- merge(gdp,edu,by.x='X',by.y='CountryCode')
# Problem 2
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','prob2data.csv')
gdp <- read.csv('prob2data.csv')
gdpedu <- merge(gdp,edu,by.x='X',by.y='CountryCode')
weirdlist <- gdpedu$Special.Notes
fiscyear <- grep("Fiscal year end: June",weirdlist)
# Problem 3
grep('United',gdp$X.2)
# Problem 3
grep('United$',gdp$X.2)
View(gdp)
gdp$Gross.domestic.product.2012 <- as.numeric(as.character(gdp$Gross.domestic.product.2012))
data2 <- gdp[complete.cases(gdp$Gross.domestic.product.2012),c(1,2,5)]
View(data2)
# Problem 1
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv','prob1data.csv')
data1 <- read.csv('prob1data.csv')
abclist <- strsplit(names(data1),"wgtp")
abclist[123]
# Problem 2
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','prob2data.csv')
gdp <- read.csv('prob2data.csv')
gdp$Gross.domestic.product.2012 <- as.numeric(as.character(gdp$Gross.domestic.product.2012))
data2 <- gdp[complete.cases(gdp$Gross.domestic.product.2012)]
data2 <- gdp[complete.cases(gdp$Gross.domestic.product.2012),]
filt <- gsub(',','',data2$X.3)
gdplist <- as.numeric(filt)
cleangdp <- na.omit(gdplist)
summary(cleangdp)
# Problem 3
grep('United$',gdp$X.2)
grep('*United',gdp$X.2)
grep('^United',gdp$X.2)
grep('^United',gdp$X.2,value=TRUE)
grep('*United',gdp$X.2,value=TRUE)
# Problem 4
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv','prob4data.csv')
edu <- read.csv('prob4data.csv')
gdpedu <- merge(gdp,edu,by.x='X',by.y='CountryCode')
weirdlist <- gdpedu$Special.Notes
fiscyear <- grep("Fiscal year end: June",weirdlist)
fisccoun <- gdpedu[fiscyear,]
View(fisccoun)
fisccoun <- gdpedu[fiscyear,c(1,2,4,18)]
View(fisccoun)
View(gdpedu)
fisccoun <- gdpedu[fiscyear,c(1,2,4,19)]
View(fisccoun)
# Problem 2
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv','prob2data.csv')
gdp <- read.csv('prob2data.csv')
gdp$Gross.domestic.product.2012 <- as.numeric(as.character(gdp$Gross.domestic.product.2012))
data2 <- gdp[complete.cases(gdp$Gross.domestic.product.2012),]
filt <- gsub(',','',data2$X.3)
gdplist <- as.numeric(filt)
cleangdp <- na.omit(gdplist)
summary(cleangdp)
mean(cleangdp)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind,data=airquality,col='red',pch=8,main='Big Apple Data')
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[['formula']]
p[['x.limits']]
table(f)
xyplot(y~x|f,layout=c(2,1))
v1
v2
myedit("plot1.R")
pathtofile("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit('myLabels.R')
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut,data=diamonds)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors,10)
sample(colors(),10)
pal <- colorRamp(c('red','blue'))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2 <- colorRampPalette(c('red','yellow'))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb <- function(variables) {
}
?rgb
p3 <- colorRampPalette(colors = c('blue','green'),alpha=0.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,0.5,0.5))
plot(x,y,pch=19,col=rgb(0,0.5,0.5,0.3))
cols <- brewer.pal(3,'BuGn')
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano,col=pal(20))
image(p1(20))
image(volcano,col=p1(20))
str(mpg)
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,color=drv,geom=c('point','smooth'))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom='boxplot')
qplot(drv,hwy,data=mpg,geom='boxplot',color=manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom=c('point','smooth'),facets=.~drv)
g <- ggplot(data=mpg,mapping=aes(displ,hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method='lm')
g+geom_point()+geom_smooth(method='lm')+facet_grid(.~drv)
g+geom_point()+geom_smooth(method='lm')+facet_grid(.~drv)+ggtitle('Swirl Rules!')
g + geom_point(color='pink',size=4,alpha=1/2)
g + geom_point(size=4,alpha=1/2,color=aes(drv))
g + geom_point(size=4,alpha=1/2,aes=color(drv))
g + geom_point(size=4,alpha=1/2,aes=drv)
g + geom_point(size=4,alpha=1/2,aes(color=drv))
g + geom_point(aes(color=drv)) + labs(title='Swirl Rules!') + labs(x='Displacement',y='Hwy Mileage')
g + geom_point(aes(color=drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method='lm',se=FALSE)
g + geom_point(color = drv) + theme_bw(base_familty='Times')
g + geom_point(aes(color = drv)) + theme_bw(base_familty='Times')
g + geom_point(aes(color = drv)) + theme_bw(base_family='Times')
plot(myx,myy,type='l',ylim=c(-3,3))
g <- ggplot(testdat,aes=c(myx,myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line(ylim=c(-3,3))
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim=c(-3,3))
g <- ggplot(mpg,aes=c(x=displ,y=hwy,color=factor(year)))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_plot()
g + geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE) + geom_smooth(method='lm',se=FALSE,size=2,color='black')
g + geom_point() + facet_grid(drv~cyl,margins=TRUE) + geom_smooth(method='lm',se=FALSE,size=2,color='black') + labs(x='Displacement',y='Highway Mileage',title='Swirl Rules!')
str(diamonds)
qplot(price,data=diamonds)
rang(diamonds$price)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom='density')
qplot(price,data=diamonds,geom='density',color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape=cut)
qplot(carat,price,data=diamonds,color=cut)
qplot(carat,price,data=diamonds,color=cut,geom_smooth='lm')
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut,facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(data=diamonds,aes=c(depth,price))
g <- ggplot(diamonds,aes(depth,price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat,cutpoints)
g <- ggplot(data=diamonds,aes(depth,price))
g + geom_point(alpha=1/3) + facet_grid(cut~car2)
diamonds[myd,]
g + geom_point(alpha=1/3) + facet_grid(cut~car2) + geom_smooth(method='lm',size=3,color='pink')
ggplot(diamonds,aes(carat,price)) + geom_boxplot() + facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
swirl()
library(swirl)
swirl()
dist(dataframe)
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col='blue')
abline(h=0.4,col='red')
5
12
abline(h=0.05,col='green')
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx,cy,col=c('red','orange','purple'),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu * diag *t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2[,1:2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] %*% svd1$d[1]) * svd1$d[1]
a1 <-  (svd1$u[,1] %*% svd1$d[1] %*% svd1$t[,1])
a1 <-  (svd1$u[,1] %*% svd1$d[1]) %*% svd1$t[,1])
a1 <-  (svd1$u[,1] %*% svd1$d[1]) %*% svd1$t[,1]
svd1$t[,1] * (svd1$u[,1] %*% svd1$d[1])
a1 <-  (svd1$u[,1] * svd1$d[1]) %*% svd1$t[,1]
a1 <-  (svd1$u[,1] * svd1$d[1]) %*% svd1$t
a1 <-  (svd1$u[,1] * svd1$d[1]) %*% svd1$v
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a1 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd,subject=1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist <- dist(x[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering(hclust(mdist))
hclustering <- (hclust(mdist))
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,'maxCon')])
mdist <- dist(sub1[,c(10,11,12,'maxCon')])
mdist <- dist(sub1[,c(10,11,12,maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering,lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)],centers=6)
table(kClust$cluster,sub1$activity)
kmeans(sub1[,-c(562,563)],centers=6,nstart=100)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
setwd("~/Desktop/Coursera Data Science/Data Science Specialization/Reproducible Rsearch/RepData_PeerAssessment1")
data <- read.csv('activity.csv')
View(data)
agg <- aggregate(steps~date,data,sum)
View(agg)
data <- read.csv('activity.csv')
data[is.na(data)] = 0
View(data)
agg <- aggregate(steps~date,data,sum)
View(agg)
View(agg)
hist(agg$steps)
meansteps <- aggregate(steps~date,data,mean)
mediasteps <- aggregate(steps~date,data,median)
View(meansteps)
format(mediansteps, scientific=F)
data <- read.csv('activity.csv')
data[is.na(data)] = 0
View(data)
dayagg <- aggregate(steps~interval,data,mean)
View(data)
View(dayagg)
maxsteps <- max(dayagg$steps)
maxint <- dayagg[which(dayagg$steps == maxsteps), 'interval']
indmax <- which(dayagg$steps == maxsteps)
maxintbeg <- dayagg[indmax - 1, 'interval']
impdata <- merge(dayagg,data,by=c('interval'),all.y=TRUE,sort=FALSE)
View(impdata)
View(impdata)
View(data)
View(impdata)
data <- read.csv('activity.csv')
agg <- aggregate(steps~date,data,sum)
hist(agg$steps)
meansteps <- mean(agg$steps)
mediansteps <- median(agg$steps)
dayagg <- aggregate(steps~interval,data,mean)
View(dayagg)
View(agg)
plot(dayagg$interval,dayagg$steps,type = "l",xlab='Time of day',ylab='Average number of steps', main='Average daily number of steps per 5-min interval')
maxsteps <- max(dayagg$steps)
indmax <- which(dayagg$steps == maxsteps)
maxintbeg <- dayagg[indmax - 1, 'interval']
maxintend <- dayagg[indmax, 'interval']
View(data)
missdat <- data$date[is.na(data$steps)]
index <- sapply(missdat, function(x) which(dayagg$interval == x))
data$steps[is.na(data$steps)] <- dayagg$steps[index]
View(index)
data$steps[is.na(data$steps)] <- dayagg$steps[index]
data <- read.csv('activity.csv')
agg <- aggregate(steps~date,data,sum)
meansteps <- mean(agg$steps)
mediansteps <- median(agg$steps)
dayagg <- aggregate(steps~interval,data,mean)
r <- merge(data, dayagg, by="interval")
View(r)
r <- merge(data, dayagg, by="interval", suffixes=c(".data", ".dayagg"))
View(r)
na.idx = which(is.na(data$steps))
data[na.idx,"steps"] = r[na.idx,"steps.dayagg"]
View(data)
na.idx
data <- read.csv('activity.csv')
agg <- aggregate(steps~date,data,sum)
dayagg <- aggregate(steps~interval,data,mean)
r <- merge(data, dayagg, by="interval", suffixes=c(".data", ".dayagg"))
data$steps <- ifelse(is.na(r$steps.data), r$steps.dayagg, r$steps.data)
View(data)
data <- read.csv('activity.csv')
agg <- aggregate(steps~date,data,sum)
dayagg <- aggregate(steps~interval,data,mean)
r <- merge(data, dayagg, by="date", suffixes=c(".data", ".dayagg"))
r <- merge(data, dayagg, by="interval", suffixes=c(".data", ".dayagg"))
View(r)
data1 <- data
data1$steps <- ifelse(is.na(r$steps.data), r$steps.dayagg, r$steps.data)
View(data1)
data <- read.csv('activity.csv')
agg <- aggregate(steps~date,data,sum)
dayagg <- aggregate(steps~interval,data,mean)
data1 <- data
data$steps[is.na(data$steps)] <- dayagg$steps[match(data$interval,dayagg$interval)][which(is.na(data$steps))]
View(data)
data <- read.csv('activity.csv')
agg <- aggregate(steps~date,data,sum)
dayagg <- aggregate(steps~interval,data,mean)
data$steps[is.na(data$steps)] <- dayagg$steps[match(data$interval,dayagg$interval)][which(is.na(data$steps))]
impagg <- aggregate(steps~date,data,sum)
data$day <- weekdays(as.Date(data$date))
View(data)
data$wkd <- factor((wkdays(data$day) %in% weekdays),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday'))
wkday <- c('Monday','Tuesday','Wednesday','Thursday','Friday')
data$wkd <- factor((weekdays(data$day) %in% wkday),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday'))
data <- read.csv('activity.csv')
agg <- aggregate(steps~date,data,sum)
dayagg <- aggregate(steps~interval,data,mean)
data$steps[is.na(data$steps)] <- dayagg$steps[match(data$interval,dayagg$interval)][which(is.na(data$steps))]
impagg <- aggregate(steps~date,data,sum)
wkday <- c('Monday','Tuesday','Wednesday','Thursday','Friday')
data$weekend <- factor((weekdays(data$date) %in% wkday),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday'))
View(data)
data$day <- weekdays(data$date)
data$weekend <- factor((weekdays(as.Date(data$date)) %in% wkday),
levels=c(FALSE, TRUE), labels=c('weekend', 'weekday'))
View(data)
View(data)
wkndagg <- aggregate(steps~interval + weekend,data,mean)
View(wkndagg)
library(ggplot2)
ggplot(data=wkndagg,aes(x=interval,y=steps,group=weekend,color=weekend)) + geom_line() + labs(x='Time of day', y='Average steps',title='Average steps for weekdays and weekends')
